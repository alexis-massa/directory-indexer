name: Python Project CI

on:
  push:
    tags:
      - '*.*'  # Matches tags like '1.2', '1.3', etc.
  pull_request:
    branches:
      - main  # If you want to run on PRs to the main branch

jobs:
  # Step 1: Build Windows Executable
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install pyinstaller

      - name: Build Executable
        run: pyinstaller --onefile --noconsole src/directory_indexer.py

      - name: Upload Executable
        uses: actions/upload-artifact@v4
        with:
          name: directory_indexer.exe
          path: dist/directory_indexer.exe

  # Step 2: Build Linux Executable
  build-linux:
    runs-on: ubuntu-latest  # Use Ubuntu runner for Linux
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install pyinstaller

      - name: Build Executable
        run: pyinstaller --onefile --name directory_indexer src/directory_indexer.py

      - name: Upload Executable
        uses: actions/upload-artifact@v4
        with:
          name: directory_indexer-linux
          path: dist/directory_indexer

  # Step 3: Convert Markdown to PDF
  convert-pdf:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install texlive-latex-recommended -y
          sudo apt install pandoc -y

      - name: Convert Markdown to PDF
        run: pandoc --from=gfm --to=pdf -o user-manual.pdf user-manual.md

      - name: Upload PDF
        uses: actions/upload-artifact@v4
        with:
          name: user-manual.pdf
          path: user-manual.pdf

  # # Step 4: Create ZIP Archive
  # package-zip:
  #   runs-on: ubuntu-latest
  #   needs: [build-windows, build-linux, convert-pdf] 
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Download Windows exe
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: directory_indexer.exe
  #         path: .

  #     - name: Download Linux exe
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: directory_indexer-linux
  #         path: .


  #     - name: Download PDF
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: user-manual.pdf
  #         path: .
          
  #     - name: Prepare Release Archive
  #       run: |
  #         echo "Creating release archive..."
  #         mkdir directory_indexer-${GITHUB_REF##*/}  # Tag name as directory
  #         cp directory_indexer.exe directory_indexer-${GITHUB_REF##*/}/directory_indexer.exe || true
  #         cp directory_indexer-linux directory_indexer-${GITHUB_REF##*/}/directory_indexer-linux || true
  #         cp user-manual.pdf directory_indexer-${GITHUB_REF##*/}/

  #     - name: Install zip
  #       run: sudo apt update && sudo apt install zip -y

  #     - name: Create ZIP Archive
  #       run: |
  #         zip -r directory_indexer-${GITHUB_REF##*/}.zip directory_indexer-${GITHUB_REF##*/}

  #     - name: List files in current directory
  #       run: ls -alh

  #     - name: Upload ZIP
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: directory_indexer-${GITHUB_REF##*/}.zip
  #         path: directory_indexer-${GITHUB_REF##*/}.zip

  # Step 5: Create GitHub Release and Upload Assets
  create-release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux, convert-pdf]  # Ensure it runs after all other jobs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}  # Uses the tag name of the current commit
          release_name: Release ${{ github.ref }}
          body: "Release notes for version ${{ github.ref }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Provide the token for authentication

      - name: Upload Windows Executable to Release
        uses: actions/upload-release-asset@v1
        with:
          url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/directory_indexer.exe
          asset_name: directory_indexer.exe
          asset_content_type: application/octet-stream

      - name: Upload Linux Executable to Release
        uses: actions/upload-release-asset@v1
        with:
          url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/directory_indexer
          asset_name: directory_indexer-linux
          asset_content_type: application/octet-stream

      # - name: Upload ZIP Archive to Release
      #   uses: actions/upload-release-asset@v1
      #   with:
      #     url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: directory_indexer-${GITHUB_REF##*/}.zip
      #     asset_name: directory_indexer-${GITHUB_REF##*/}.zip
      #     asset_content_type: application/zip